// Paw 标准库 Prelude
// 自动导入到每个 Paw 程序中

// ============================================
// 1. 标准输出函数
// ============================================

// println - 打印并换行
fn println(msg: string) -> i32 {
    // 内置函数，由编译器特殊处理
    return 0;
}

// print - 打印不换行
fn print(msg: string) -> i32 {
    // 内置函数，由编译器特殊处理
    return 0;
}

// eprintln - 打印错误信息并换行（输出到 stderr）
fn eprintln(msg: string) -> i32 {
    // 内置函数，由编译器特殊处理
    return 0;
}

// eprint - 打印错误信息不换行（输出到 stderr）
fn eprint(msg: string) -> i32 {
    // 内置函数，由编译器特殊处理
    return 0;
}

// ============================================
// 2. Result<T, E> - 错误处理类型
// ============================================

type Result = enum {
    Ok(i32),
    Err(i32),
}

// ============================================
// 3. Option<T> - 可选类型
// ============================================

type Option = enum {
    Some(i32),
    None(),
}

// ============================================
// 4. Vec<T> - 动态数组（泛型结构体）
// ============================================

type Vec<T> = struct {
    ptr: i32,       // 简化：实际应为 *T（数据指针）
    len: i32,       // 当前长度
    cap: i32,       // 容量
    
    // 🆕 v0.1.2: 泛型静态方法
    fn new() -> Vec<T> {
        return Vec { ptr: 0, len: 0, cap: 0 };
    }
    
    fn with_capacity(capacity: i32) -> Vec<T> {
        return Vec { ptr: 0, len: 0, cap: capacity };
    }
    
    // 🆕 v0.1.2: 泛型实例方法（self不带类型！）
    fn length(self) -> i32 {
        return self.len;
    }
    
    fn capacity_method(self) -> i32 {
        return self.cap;
    }
}

// ============================================
// 5. Box<T> - 智能指针（泛型结构体）
// ============================================

type Box<T> = struct {
    value: T,
    
    // 🆕 v0.1.2: 泛型静态方法
    fn new(val: T) -> Box<T> {
        return Box { value: val };
    }
}

// ============================================
// 6. 数组和集合操作
// ============================================

// 注意：以下函数需要泛型方法支持（v0.1.2）
// 当前版本仅提供类型定义

// ============================================
// 7. 未来扩展（v0.1.2+）
// ============================================

// 计划添加：
// - 泛型方法（Vec<T>::new, Box<T>::new）
// - 数学函数（abs, min, max）
// - 字符串操作（len, concat, split）
// - 断言函数（assert, panic）
// - 文件 I/O
// - 网络操作