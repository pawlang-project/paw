// 完整的模式匹配测试

type Option = enum {
    Some(i32),
    None(),
}

type Result = enum {
    Ok(i32),
    Error(string),
}

// 测试1：基本match表达式
fn test_basic_match() -> i32 {
    let val: Option = Option::Some(100);
    
    let result: i32 = val is {
        Some(x) => x,
        None() => 0,
    };
    
    return result;  // 应返回100
}

// 测试2：多分支match
fn test_multi_branch() -> i32 {
    let r: Result = Result::Ok(42);
    
    let result: i32 = r is {
        Ok(value) => value * 2,
        Error(msg) => 0,
    };
    
    return result;  // 应返回84
}

// 测试3：is条件表达式
fn test_is_condition(opt: Option) -> i32 {
    if opt is Some(x) {
        return x;
    }
    return -1;
}

// 测试4：嵌套match
fn test_nested_match() -> i32 {
    let opt1: Option = Option::Some(10);
    let opt2: Option = Option::None();
    
    let a: i32 = opt1 is {
        Some(x) => x,
        None() => 0,
    };
    
    let b: i32 = opt2 is {
        Some(x) => x,
        None() => 5,
    };
    
    return a + b;  // 应返回15 (10+5)
}

fn main() -> i32 {
    let t1: i32 = test_basic_match();      // 100
    let t2: i32 = test_multi_branch();     // 84
    
    let some_val: Option = Option::Some(20);
    let t3: i32 = test_is_condition(some_val);  // 20
    
    let t4: i32 = test_nested_match();     // 15
    
    // 总和: 100 + 84 + 20 + 15 = 219
    return t1 + t2 + t3 + t4;
}
