{
  "name": "Paw",
  "scopeName": "source.paw",
  "fileTypes": ["paw"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#types"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#operators"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.paw",
          "match": "//.*$"
        },
        {
          "name": "comment.block.paw",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.paw",
          "match": "\\b(if|else|while|for|return|break|continue|match|import)\\b"
        },
        {
          "name": "keyword.declaration.paw",
          "match": "\\b(let|mut|fn|type|struct|enum|pub|const)\\b"
        },
        {
          "name": "keyword.other.paw",
          "match": "\\b(as|in|self|mut self)\\b"
        },
        {
          "name": "constant.language.paw",
          "match": "\\b(true|false|null)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.paw",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.paw",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.paw",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.paw",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.paw",
          "match": "\\b[0-9]+\\.[0-9]+([eE][+-]?[0-9]+)?\\b"
        },
        {
          "name": "constant.numeric.integer.paw",
          "match": "\\b[0-9]+\\b"
        },
        {
          "name": "constant.numeric.hex.paw",
          "match": "\\b0x[0-9a-fA-F]+\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.paw",
          "match": "\\b(i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|bool|string|void)\\b"
        },
        {
          "name": "entity.name.type.paw",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.paw",
          "match": "\\b[a-z_][a-zA-Z0-9_]*(?=\\s*\\()"
        },
        {
          "name": "entity.name.function.paw",
          "match": "(?<=fn\\s+)[a-z_][a-zA-Z0-9_]*"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.paw",
          "match": "(\\+|-|\\*|/|%|==|!=|<|>|<=|>=|&&|\\|\\||!|=|\\+=|-=|\\*=|/=)"
        },
        {
          "name": "keyword.operator.arrow.paw",
          "match": "(->|=>)"
        },
        {
          "name": "punctuation.separator.paw",
          "match": "(,|;|::|:)"
        }
      ]
    }
  }
}

