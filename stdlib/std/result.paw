// std::result - Result操作辅助函数
// 由于泛型限制，提供具体类型的实现

// ========== i32? 辅助函数 ==========

pub fn is_ok_i32(result: i32?) -> bool {
    let check: bool = result is Value(v);
    return check;
}

pub fn is_err_i32(result: i32?) -> bool {
    let check: bool = result is Error(e);
    return check;
}

pub fn unwrap_i32(result: i32?) -> i32 {
    let value: i32 = result is {
        Value(v) => v,
        Error(e) => 0,
    };
    return value;
}

pub fn unwrap_or_i32(result: i32?, default_val: i32) -> i32 {
    let value: i32 = result is {
        Value(v) => v,
        Error(e) => default_val,
    };
    return value;
}

pub fn get_error_i32(result: i32?) -> string {
    let msg: string = result is {
        Value(v) => "",
        Error(e) => e,
    };
    return msg;
}

// ========== i64? 辅助函数 ==========

pub fn is_ok_i64(result: i64?) -> bool {
    let check: bool = result is Value(v);
    return check;
}

pub fn is_err_i64(result: i64?) -> bool {
    let check: bool = result is Error(e);
    return check;
}

pub fn unwrap_i64(result: i64?) -> i64 {
    let zero: i64 = 0;
    let value: i64 = result is {
        Value(v) => v,
        Error(e) => zero,
    };
    return value;
}

pub fn unwrap_or_i64(result: i64?, default_val: i64) -> i64 {
    let value: i64 = result is {
        Value(v) => v,
        Error(e) => default_val,
    };
    return value;
}

// ========== string? 辅助函数 ==========

pub fn is_ok_string(result: string?) -> bool {
    let check: bool = result is Value(v);
    return check;
}

pub fn is_err_string(result: string?) -> bool {
    let check: bool = result is Error(e);
    return check;
}

pub fn unwrap_string(result: string?) -> string {
    let value: string = result is {
        Value(v) => v,
        Error(e) => "",
    };
    return value;
}

pub fn unwrap_or_string(result: string?, default_val: string) -> string {
    let value: string = result is {
        Value(v) => v,
        Error(e) => default_val,
    };
    return value;
}
