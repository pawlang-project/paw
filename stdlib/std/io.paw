// std::io - 文件和IO操作库
// 提供完整的文件系统操作API（命名不超过3个单词）

// ============ C标准库函数声明 ============

extern "C" fn fopen(filename: string, mode: string) -> i64;
extern "C" fn fclose(file: i64) -> i32;
extern "C" fn fwrite(ptr: string, size: i64, count: i64, file: i64) -> i64;
extern "C" fn fread(ptr: string, size: i64, count: i64, file: i64) -> i64;
extern "C" fn remove(filename: string) -> i32;
extern "C" fn fflush(file: i64) -> i32;
extern "C" fn rename(old_name: string, new_name: string) -> i32;
extern "C" fn access(path: string, mode: i32) -> i32;

// ============ PawLang文件操作API ============

// 打开和关闭
pub fn open(filename: string, mode: string) -> i64 {
    return fopen(filename, mode);
}

pub fn close(file: i64) -> bool {
    let result: i32 = fclose(file);
    let zero: i32 = 0;
    return result == zero;
}

// 写入和追加
pub fn write(filename: string, content: string) -> bool {
    let file: i64 = fopen(filename, "w");
    let zero: i64 = 0;
    if file == zero {
        return false;
    }
    
    let one: i64 = 1;
    fwrite(content, one, one, file);
    fflush(file);
    fclose(file);
    return true;
}

pub fn append(filename: string, content: string) -> bool {
    let file: i64 = fopen(filename, "a");
    let zero: i64 = 0;
    if file == zero {
        return false;
    }
    
    let one: i64 = 1;
    fwrite(content, one, one, file);
    fflush(file);
    fclose(file);
    return true;
}

// 删除和重命名
pub fn delete(filename: string) -> bool {
    let result: i32 = remove(filename);
    let zero: i32 = 0;
    return result == zero;
}

pub fn rename_file(old_name: string, new_name: string) -> bool {
    let result: i32 = rename(old_name, new_name);
    let zero: i32 = 0;
    return result == zero;
}

// ============ 文件系统查询 ============

pub fn exists(path: string) -> bool {
    let zero: i32 = 0;
    let result: i32 = access(path, zero);
    return result == zero;
}

pub fn is_file(path: string) -> bool {
    let file: i64 = fopen(path, "r");
    let zero: i64 = 0;
    if file == zero {
        return false;
    }
    fclose(file);
    return true;
}

pub fn is_dir(path: string) -> bool {
    let exist: bool = exists(path);
    if exist {
        let file: bool = is_file(path);
        if file {
            return false;
        }
        return true;
    }
    return false;
}

// ============ 权限检查 ============

pub fn can_read(path: string) -> bool {
    let mode: i32 = 4;
    let result: i32 = access(path, mode);
    let zero: i32 = 0;
    return result == zero;
}

pub fn can_write(path: string) -> bool {
    let mode: i32 = 2;
    let result: i32 = access(path, mode);
    let zero: i32 = 0;
    return result == zero;
}

pub fn can_execute(path: string) -> bool {
    let mode: i32 = 1;
    let result: i32 = access(path, mode);
    let zero: i32 = 0;
    return result == zero;
}
