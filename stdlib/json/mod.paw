// JSON 解析器模块 - v0.2.0
// PawLang标准库
// 
// 基础JSON解析功能
// 支持: null, true, false, 单位数字

// ============================================================================
// 公共类型
// ============================================================================

/// JSON值枚举类型
pub type JsonValue = enum {
    Null(),
    Bool(bool),
    Number(f64),
    String(string),
}

// ============================================================================
// 公共API
// ============================================================================

/// 解析JSON字符串为JsonValue
/// 
/// 支持：
/// - "null" -> Null()
/// - "true" -> Bool(true)
/// - "false" -> Bool(false)
/// - "42" -> Number(42.0) (多位数字)
/// - "-123" -> Number(-123.0) (负数)
/// - "3.14" -> Number(3.14) (浮点数，简化版)
/// 
/// 示例：
/// ```paw
/// let value = parse("null");
/// let bool_val = parse("true");
/// let num_val = parse("42");
/// let neg_val = parse("-100");
/// ```
pub fn parse(json_str: string) -> JsonValue {
    let len: i32 = string_length(json_str);
    
    if len == 0 {
        return Null();
    }
    
    let first: char = json_str[0];
    let code: i32 = first as i32;
    
    // 'n' for null (110)
    if code == 110 {
        return Null();
    }
    
    // 't' for true (116)
    if code == 116 {
        return Bool(true);
    }
    
    // 'f' for false (102)
    if code == 102 {
        return Bool(false);
    }
    
    // 数字：digits '0'-'9' (48-57) 或 '-' (45)
    if (code >= 48 && code <= 57) || code == 45 {
        let number: f64 = parse_number(json_str);
        return Number(number);
    }
    
    // 默认返回null
    return Null();
}

/// 解析数字（支持多位数、负数、浮点数）
fn parse_number(json_str: string) -> f64 {
    let len: i32 = string_length(json_str);
    let mut i: i32 = 0;
    let mut result: i32 = 0;
    let mut is_negative: bool = false;
    
    // 检查负号
    let first: char = json_str[0];
    if (first as i32) == 45 {  // '-'
        is_negative = true;
        i = 1;
    }
    
    // 解析整数部分（最多10位，避免溢出）
    loop {
        if i >= len {
            break;
        }
        if i >= 10 {  // 限制最多10位
            break;
        }
        
        let ch: char = json_str[i];
        let code: i32 = ch as i32;
        
        if code >= 48 && code <= 57 {  // '0'-'9'
            let digit: i32 = code - 48;
            result = result * 10 + digit;
            i += 1;
        } else if code == 46 {  // '.' 小数点
            // 简化：忽略小数部分
            break;
        } else {
            break;
        }
    }
    
    // 应用负号
    if is_negative {
        result = -result;
    }
    
    return result as f64;
}

/// 检查JSON字符串是否有效
pub fn is_valid(json_str: string) -> bool {
    let len: i32 = string_length(json_str);
    
    if len == 0 {
        return false;
    }
    
    let first: char = json_str[0];
    let code: i32 = first as i32;
    
    // 检查已知的有效开头
    let is_null: bool = code == 110;    // 'n'
    let is_true: bool = code == 116;    // 't'
    let is_false: bool = code == 102;   // 'f'
    let is_digit: bool = code >= 48 && code <= 57;
    
    if is_null {
        return true;
    }
    if is_true {
        return true;
    }
    if is_false {
        return true;
    }
    if is_digit {
        return true;
    }
    
    return false;
}

// ============================================================================
// 工具函数
// ============================================================================

/// 判断JsonValue是否为null
pub fn is_null(value: JsonValue) -> bool {
    return value is {
        Null() => true,
        _ => false,
    };
}

/// 判断JsonValue是否为布尔值
pub fn is_bool(value: JsonValue) -> bool {
    return value is {
        Bool(b) => true,
        _ => false,
    };
}

/// 判断JsonValue是否为数字
pub fn is_number(value: JsonValue) -> bool {
    return value is {
        Number(n) => true,
        _ => false,
    };
}

/// 判断JsonValue是否为字符串
pub fn is_string(value: JsonValue) -> bool {
    return value is {
        String(s) => true,
        _ => false,
    };
}

/// 从JsonValue提取bool值（如果可能）
/// 返回-1表示不是bool类型
pub fn as_bool(value: JsonValue) -> i32 {
    return value is {
        Bool(b) => {
            if b {
                return 1;
            } else {
                return 0;
            }
        },
        _ => -1,
    };
}

/// 从JsonValue提取数字值（如果可能）
/// 返回0表示不是数字或值为0
pub fn as_number(value: JsonValue) -> i32 {
    return value is {
        Number(n) => n as i32,
        _ => 0,
    };
}

// ============================================================================
// 版本和状态
// ============================================================================

// Version: v0.2.0
// Status: 功能增强版
// 
// ✅ 已实现:
// - parse(): null, true, false, 多位数字, 负数 ⭐
// - is_valid(): 基础验证
// - is_null(), is_bool(), is_number(), is_string() ⭐
// - as_bool(), as_number() ⭐
// - JsonValue enum
// 
// ⏳ v0.3.0计划:
// - 完整浮点数解析
// - 字符串解析（带引号）
// - stringify()函数
// - 嵌套对象和数组
