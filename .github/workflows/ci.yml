name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: 0.14.0
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install LLVM (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "📥 Installing LLVM using install_llvm_complete.py"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        python3 scripts/install_llvm_complete.py --yes --skip-build --skip-test
        echo ""
        echo "✅ LLVM installation complete"
      
    - name: Install LLVM (Windows)
      if: runner.os == 'Windows'
      run: |
        echo ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
        echo 📥 Installing LLVM 19 via Chocolatey
        echo ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
        choco install llvm --version=19.1.6 -y
        mkdir llvm
        mkdir llvm\install
        mklink /D llvm\install\bin "C:\Program Files\LLVM\bin"
        mklink /D llvm\install\lib "C:\Program Files\LLVM\lib"
        mklink /D llvm\install\include "C:\Program Files\LLVM\include"
        echo.
        echo ✅ LLVM installation complete
      shell: cmd
        
    - name: Build PawLang compiler
      run: zig build
      
    - name: Test - Hello World (Unix)
      if: runner.os != 'Windows'
      run: |
        ./zig-out/bin/pawc examples/hello.paw
        echo "✅ Hello World test passed"
      
    - name: Test - Hello World (Windows)
      if: runner.os == 'Windows'
      run: |
        .\zig-out\bin\pawc.exe examples\hello.paw
        echo "✅ Hello World test passed"
      shell: cmd
      
    - name: Test - Type Casting (Unix)
      if: runner.os != 'Windows'
      run: |
        ./zig-out/bin/pawc tests/syntax/test_type_cast.paw --backend=c
        if [ -f output.c ]; then
          echo "✅ Type casting test passed"
          rm output.c
        fi
      
    - name: Test - Type Casting (Windows)
      if: runner.os == 'Windows'
      run: |
        .\zig-out\bin\pawc.exe tests\syntax\test_type_cast.paw --backend=c
        if exist output.c (
          echo ✅ Type casting test passed
          del output.c
        )
      shell: cmd
      
    - name: Test - Integration Test (Unix)
      if: runner.os != 'Windows'
      run: |
        ./zig-out/bin/pawc tests/integration/v0.1.8_test.paw --backend=c
        if [ -f output.c ]; then
          echo "✅ Integration test passed"
          rm output.c
        fi
      
    - name: Test - Integration Test (Windows)
      if: runner.os == 'Windows'
      run: |
        .\zig-out\bin\pawc.exe tests\integration\v0.1.8_test.paw --backend=c
        if exist output.c (
          echo ✅ Integration test passed
          del output.c
        )
      shell: cmd
      
    - name: Test - LLVM Backend (Unix)
      if: runner.os != 'Windows'
      run: |
        ./zig-out/bin/pawc tests/syntax/test_type_cast.paw --backend=llvm
        if [ -f output.ll ]; then
          echo "✅ LLVM backend test passed"
          # Try to compile with clang if available
          if command -v clang &> /dev/null; then
            clang output.ll -o test_llvm 2>/dev/null || echo "⚠️  clang compilation skipped"
            if [ -f test_llvm ]; then
              ./test_llvm
              if [ $? -eq 21 ]; then
                echo "✅ LLVM runtime test passed (exit code: 21)"
              fi
              rm -f test_llvm
            fi
          fi
          rm output.ll
        fi
      
    - name: Test - LLVM Backend (Windows)  
      if: runner.os == 'Windows'
      run: |
        .\zig-out\bin\pawc.exe tests\syntax\test_type_cast.paw --backend=llvm
        if exist output.ll (
          echo ✅ LLVM backend test passed
          del output.ll
        )
      shell: cmd
      
    - name: Summary
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "✅ All tests passed on ${{ matrix.os }}!"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      shell: bash
