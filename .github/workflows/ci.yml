name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  # Native platform tests (x86_64 + ARM64 macOS)
  test-native:
    name: Test ${{ matrix.platform }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            platform: Linux
            arch: x86_64
          - os: ubuntu-22.04
            platform: Linux 22.04 LTS
            arch: x86_64
          
          # macOS x86_64 and ARM64
          - os: macos-13
            platform: macOS
            arch: x86_64
          - os: macos-latest
            platform: macOS
            arch: ARM64
          
          # Windows x86_64
          - os: windows-latest
            platform: Windows
            arch: x86_64
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: 0.15.1
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install LLVM (Linux)
      if: runner.os == 'Linux'
      run: |
        # Install LLVM 19 from official LLVM repository
        echo "Installing LLVM 19 from official source..."
        
        # Add LLVM official repository
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
        
        # Detect Ubuntu version
        . /etc/os-release
        UBUNTU_CODENAME=$(lsb_release -cs)
        
        # Add repository based on Ubuntu version
        echo "deb http://apt.llvm.org/${UBUNTU_CODENAME}/ llvm-toolchain-${UBUNTU_CODENAME}-19 main" | sudo tee /etc/apt/sources.list.d/llvm.list
        
        # Update and install
        sudo apt-get update
        sudo apt-get install -y llvm-19 llvm-19-dev clang-19 libc++-19-dev libc++abi-19-dev
        
        # Verify installation
        llvm-config-19 --version
        echo "✅ LLVM 19 installed successfully"
      
    - name: Install LLVM (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install llvm@19
        echo "✅ LLVM 19 installed successfully"
      
    - name: Install LLVM (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        choco install llvm --version=19.1.7 -y
        
        # 添加到PATH
        $env:PATH = "C:\Program Files\LLVM\bin;$env:PATH"
        [Environment]::SetEnvironmentVariable("PATH", $env:PATH, [EnvironmentVariableTarget]::Process)
        
        # 验证LLVM安装 (注意: Windows的LLVM没有llvm-config.exe)
        echo "Verifying LLVM installation:"
        clang --version
        
        echo ""
        echo "LLVM bin directory contents:"
        Get-ChildItem "C:\Program Files\LLVM\bin" | Select-Object Name | Format-Table -AutoSize
        
    - name: Build PawLang compiler
      run: zig build
      # Windows下build.zig会自动复制LLVM DLL到输出目录
      
    - name: Test - Hello World (Unix)
      if: runner.os != 'Windows'
      run: |
        ./zig-out/bin/pawc examples/hello.paw
        echo "✅ Hello World test passed"
      
    - name: Test - Hello World (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        .\zig-out\bin\pawc.exe examples\hello.paw
        if (Test-Path output.c) {
          echo "✅ Hello World test passed"
          Remove-Item output.c
        } else {
          echo "❌ Test failed"
          exit 1
        }
      
    - name: Test - Type Casting (Unix)
      if: runner.os != 'Windows'
      run: |
        ./zig-out/bin/pawc examples/type_cast_demo.paw --backend=c
        if [ -f output.c ]; then
          echo "✅ Type casting test passed"
          rm output.c
        fi
      
    - name: Test - Type Casting (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        .\zig-out\bin\pawc.exe examples\type_cast_demo.paw --backend=c
        if (Test-Path output.c) {
          echo "✅ Type casting test passed"
          Remove-Item output.c
        } else {
          echo "❌ Test failed"
          exit 1
        }
      
    - name: Test - Integration Test (Unix)
      if: runner.os != 'Windows'
      run: |
        ./zig-out/bin/pawc tests/integration/v0.1.8_test.paw --backend=c
        if [ -f output.c ]; then
          echo "✅ Integration test passed"
          rm output.c
        fi
      
    - name: Test - Integration Test (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        .\zig-out\bin\pawc.exe tests\integration\v0.1.8_test.paw --backend=c
        if (Test-Path output.c) {
          echo "✅ Integration test passed"
          Remove-Item output.c
        } else {
          echo "❌ Test failed"
          exit 1
        }
      
    - name: Test - LLVM Backend (Unix)
      if: runner.os != 'Windows'
      run: |
        ./zig-out/bin/pawc examples/type_cast_demo.paw --backend=llvm
        if [ -f output.ll ]; then
          echo "✅ LLVM backend test passed"
          # Try to compile with clang if available
          if command -v clang &> /dev/null; then
            clang output.ll -o test_llvm 2>/dev/null || echo "⚠️  clang compilation skipped"
            if [ -f test_llvm ]; then
              ./test_llvm
              echo "✅ LLVM runtime test completed (exit code: $?)"
              rm -f test_llvm
            fi
          fi
          rm output.ll
        fi
      
    - name: Test - LLVM Backend (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        .\zig-out\bin\pawc.exe examples\type_cast_demo.paw --backend=llvm
        if (Test-Path output.ll) {
          echo "✅ LLVM backend test passed"
          Remove-Item output.ll
        } else {
          echo "❌ Test failed"
          exit 1
        }
      
    - name: Test - Build without LLVM backend (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🧪 Testing build without LLVM backend..."
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        # Build without LLVM
        zig build -Denable-llvm=false
        
        # Test C backend (should work)
        ./zig-out/bin/pawc examples/hello.paw --backend=c
        if [ -f output.c ]; then
          echo "PASS: C backend works without LLVM"
          rm output.c
        else
          echo "FAIL: C backend failed"
          exit 1
        fi
        
        # Test LLVM backend (should fail gracefully)
        if ./zig-out/bin/pawc examples/hello.paw --backend=llvm 2>&1 | grep -q "LLVM backend not available"; then
          echo "PASS: LLVM backend correctly disabled"
        else
          echo "FAIL: LLVM backend should be disabled"
          exit 1
        fi
        
        echo "✅ No-LLVM build test passed"
        
        # Rebuild with LLVM for subsequent tests
        zig build
      
    - name: Test - Build without LLVM backend (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Write-Host "Testing build without LLVM backend..."
        
        # Build without LLVM
        zig build -Denable-llvm=false
        
        # Test C backend (should work)
        Write-Host "Test 1: C backend without LLVM"
        $ErrorActionPreference = 'Continue'
        & .\zig-out\bin\pawc.exe examples\hello.paw --backend=c
        $ErrorActionPreference = 'Stop'
        if (Test-Path output.c) {
          Write-Host "PASS: C backend works"
          Remove-Item output.c
        } else {
          Write-Host "FAIL: C backend failed"
          exit 1
        }
        
        # Test LLVM backend (should fail gracefully)
        Write-Host "Test 2: LLVM backend (should be disabled)"
        $ErrorActionPreference = 'Continue'
        $output = & .\zig-out\bin\pawc.exe examples\hello.paw --backend=llvm 2>&1 | Out-String
        $ErrorActionPreference = 'Stop'
        if ($output -match "LLVM backend not available") {
          Write-Host "PASS: LLVM backend correctly disabled"
        } else {
          Write-Host "FAIL: LLVM backend should be disabled"
          Write-Host $output
          exit 1
        }
        
        Write-Host ""
        Write-Host "OK: All no-LLVM tests passed!"
        
        # Rebuild with LLVM
        zig build
    
    - name: Test - Distribution Package (Unix) - Build
      if: runner.os != 'Windows'
      run: |
        echo ""
        echo "=========================================="
        echo "Building distribution package..."
        echo "=========================================="
        zig build package
        echo "Package created"
    
    - name: Test - Distribution Package (Unix) - Uninstall LLVM
      if: runner.os != 'Windows'
      run: |
        echo ""
        echo "Uninstalling system LLVM for testing..."
        if [ "$RUNNER_OS" = "macOS" ]; then
          brew uninstall --ignore-dependencies llvm@19 || true
          rm -rf /opt/homebrew/opt/llvm@19 || true
          rm -rf /usr/local/opt/llvm@19 || true
          echo "macOS LLVM uninstalled"
        else
          sudo apt-get remove -y llvm-19 llvm-19-dev clang-19 libc++-19-dev libc++abi-19-dev || true
          sudo rm -rf /usr/lib/llvm-19 || true
          echo "Linux LLVM uninstalled"
        fi
        
        # Verify LLVM is really gone
        if command -v llvm-config &> /dev/null; then
          echo "Warning: llvm-config still found"
          which llvm-config
        else
          echo "Verified: llvm-config not found"
        fi
    
    - name: Test - Distribution Package (Unix) - Test Package
      if: runner.os != 'Windows'
      run: |
        echo ""
        echo "Testing distribution package in clean environment..."
        
        # Create clean test directory
        TEST_DIR="/tmp/pawlang-dist-test-$$"
        mkdir -p "$TEST_DIR"
        cd "$TEST_DIR"
        
        # Extract package
        if [ "$RUNNER_OS" = "macOS" ]; then
          tar -xzf "$GITHUB_WORKSPACE/pawlang-macos.tar.gz"
        else
          tar -xzf "$GITHUB_WORKSPACE/pawlang-linux.tar.gz"
        fi
        
        # Clear any LLVM env vars
        unset LLVM_SYS_190_PREFIX
        
        # Set library paths for self-contained distribution
        if [ "$RUNNER_OS" = "macOS" ]; then
          export DYLD_LIBRARY_PATH="$PWD/pawlang/lib:$DYLD_LIBRARY_PATH"
        else
          export LD_LIBRARY_PATH="$PWD/pawlang/lib:$LD_LIBRARY_PATH"
        fi
        
        echo "Test 1: C backend WITHOUT system LLVM"
        ./pawlang/bin/pawc "$GITHUB_WORKSPACE/examples/hello.paw" --backend=c
        if [ -f output.c ]; then
          echo "✅ C backend works!"
          rm output.c
        else
          echo "❌ C backend failed"
          exit 1
        fi
        
        echo ""
        echo "Test 2: LLVM backend WITHOUT system LLVM (critical test!)"
        ./pawlang/bin/pawc "$GITHUB_WORKSPACE/examples/hello.paw" --backend=llvm
        if [ -f output.ll ]; then
          echo "✅ LLVM backend works!"
          head -n 5 output.ll
          rm output.ll
        else
          echo "❌ LLVM backend failed"
          ls -la pawlang/lib/ || true
          exit 1
        fi
        
        echo ""
        echo "Test 3: Check bundled libraries"
        if [ "$RUNNER_OS" = "macOS" ]; then
          LIB_COUNT=$(ls pawlang/lib/*.dylib 2>/dev/null | wc -l || echo "0")
          echo "Bundled dylibs: $LIB_COUNT"
          ls -lh pawlang/lib/*.dylib 2>/dev/null || true
        else
          LIB_COUNT=$(ls pawlang/lib/*.so* 2>/dev/null | wc -l || echo "0")
          echo "Bundled shared libraries: $LIB_COUNT"
          ls -lh pawlang/lib/*.so* 2>/dev/null || true
        fi
        
        if [ "$LIB_COUNT" -gt 0 ]; then
          echo "✅ Libraries properly bundled"
        else
          echo "⚠️  Warning: No libraries found (may be statically linked)"
        fi
        
        echo ""
        echo "=========================================="
        echo "✅ Distribution package works perfectly!"
        echo "=========================================="
    
    - name: Test - Distribution Package (Windows) - Build
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Write-Host ""
        Write-Host "Building distribution package..."
        zig build package
        Write-Host "Package created"
    
    - name: Test - Distribution Package (Windows) - Uninstall LLVM
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Write-Host ""
        Write-Host "Uninstalling system LLVM for testing..."
        choco uninstall llvm -y --all-versions
        Remove-Item -Path "C:\Program Files\LLVM" -Recurse -Force -ErrorAction SilentlyContinue
        Write-Host "Windows LLVM uninstalled"
    
    - name: Test - Distribution Package (Windows) - Test Package
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Write-Host ""
        Write-Host "Testing distribution package in clean environment..."
        
        # Create clean test directory
        $testDir = "C:\pawlang-dist-test-$PID"
        New-Item -ItemType Directory -Path $testDir -Force
        Set-Location $testDir
        
        # Extract package
        Expand-Archive -Path "$env:GITHUB_WORKSPACE\pawlang-windows.zip" -DestinationPath .
        
        # Clear LLVM env vars
        $env:LLVM_SYS_190_PREFIX = ""
        $env:PATH = $env:PATH -replace "C:\\Program Files\\LLVM\\bin;", ""
        
        # Test C backend
        Write-Host ""
        Write-Host "Test 1: C backend WITHOUT system LLVM"
        $ErrorActionPreference = 'Continue'
        & .\bin\pawc.exe $env:GITHUB_WORKSPACE\examples\hello.paw --backend=c
        $ErrorActionPreference = 'Stop'
        if (Test-Path output.c) {
          Write-Host "PASS: C backend works!"
          Remove-Item output.c
        } else {
          Write-Host "FAIL: C backend failed"
          exit 1
        }
        
        # Test LLVM backend (critical!)
        Write-Host ""
        Write-Host "Test 2: LLVM backend WITHOUT system LLVM"
        $ErrorActionPreference = 'Continue'
        & .\bin\pawc.exe $env:GITHUB_WORKSPACE\examples\hello.paw --backend=llvm
        $ErrorActionPreference = 'Stop'
        if (Test-Path output.ll) {
          Write-Host "PASS: LLVM backend works!"
          Get-Content output.ll | Select-Object -First 5
          Remove-Item output.ll
        } else {
          Write-Host "FAIL: LLVM backend failed"
          Get-ChildItem bin\*.dll | Select-Object Name | Format-Table
          exit 1
        }
        
        # Verify DLLs
        Write-Host ""
        Write-Host "Test 3: Check bundled DLLs"
        $dllCount = (Get-ChildItem bin\*.dll | Measure-Object).Count
        Write-Host "Total DLLs: $dllCount"
        if ($dllCount -gt 0) {
          Write-Host "PASS: DLLs properly bundled"
        } else {
          Write-Host "FAIL: No DLLs found"
          exit 1
        }
        
        Write-Host ""
        Write-Host "SUCCESS: Distribution package works!"
    
    - name: Summary
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "✅ All tests passed!"
        echo "   Platform: ${{ matrix.platform }} (${{ matrix.arch }})"
        echo "   • C backend ✅"
        echo "   • LLVM backend ✅"
        echo "   • No-LLVM build ✅"
        echo "   • Error handling ✅"
        echo "   • Self-contained distribution ✅"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      shell: bash

  # QEMU-based multi-architecture tests
  test-qemu:
    name: Test Linux (${{ matrix.arch }}) via QEMU
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [aarch64, armv7, riscv64, ppc64le, s390x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test on ${{ matrix.arch }}
      uses: uraimo/run-on-arch-action@v2
      with:
        arch: ${{ matrix.arch }}
        distro: ubuntu_latest
        githubToken: ${{ github.token }}
        install: |
          apt-get update -q -y
          apt-get install -q -y wget curl xz-utils git lsb-release software-properties-common
          
          # Install LLVM 19
          echo "Installing LLVM 19..."
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          echo "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-19 main" | tee /etc/apt/sources.list.d/llvm.list
          apt-get update -q -y
          apt-get install -q -y llvm-19 llvm-19-dev clang-19 libc++-19-dev libc++abi-19-dev || {
            echo "LLVM 19 installation failed, trying alternative..."
            apt-get install -q -y llvm llvm-dev clang libc++-dev libc++abi-dev
          }
          
          # Install Zig
          echo "Installing Zig..."
          wget -q https://ziglang.org/download/0.15.1/zig-linux-x86_64-0.15.1.tar.xz
          tar -xf zig-linux-x86_64-0.15.1.tar.xz
          mv zig-linux-x86_64-0.15.1 /usr/local/zig
          ln -s /usr/local/zig/zig /usr/local/bin/zig
          
        run: |
          echo "=========================================="
          echo "Testing PawLang on ${{ matrix.arch }}"
          echo "=========================================="
          
          # Verify tools
          echo "Zig version:"
          zig version
          echo ""
          echo "LLVM version:"
          llvm-config-19 --version || llvm-config --version
          
          # Build
          echo ""
          echo "=========================================="
          echo "Building PawLang compiler..."
          echo "=========================================="
          zig build
          
          # Test 1: C backend
          echo ""
          echo "Test 1: C backend"
          ./zig-out/bin/pawc examples/hello.paw --backend=c
          if [ -f output.c ]; then
            echo "✅ C backend test passed"
            rm output.c
          else
            echo "❌ C backend test failed"
            exit 1
          fi
          
          # Test 2: Type casting
          echo ""
          echo "Test 2: Type casting"
          ./zig-out/bin/pawc examples/type_cast_demo.paw --backend=c
          if [ -f output.c ]; then
            echo "✅ Type casting test passed"
            rm output.c
          else
            echo "❌ Type casting test failed"
            exit 1
          fi
          
          # Test 3: Integration test
          echo ""
          echo "Test 3: Integration test"
          ./zig-out/bin/pawc tests/integration/v0.1.8_test.paw --backend=c
          if [ -f output.c ]; then
            echo "✅ Integration test passed"
            rm output.c
          else
            echo "❌ Integration test failed"
            exit 1
          fi
          
          # Test 4: LLVM backend
          echo ""
          echo "Test 4: LLVM backend"
          ./zig-out/bin/pawc examples/hello.paw --backend=llvm
          if [ -f output.ll ]; then
            echo "✅ LLVM backend test passed"
            rm output.ll
          else
            echo "❌ LLVM backend test failed"
            exit 1
          fi
          
          # Test 5: Self-contained distribution
          echo ""
          echo "=========================================="
          echo "Test 5: Self-contained distribution"
          echo "=========================================="
          zig build package
          
          # Uninstall LLVM
          echo "Uninstalling system LLVM..."
          apt-get remove -y llvm-19 llvm-19-dev clang-19 libc++-19-dev libc++abi-19-dev llvm llvm-dev clang libc++-dev libc++abi-dev 2>/dev/null || true
          rm -rf /usr/lib/llvm-19 /usr/lib/llvm* 2>/dev/null || true
          
          # Create test directory
          mkdir -p /tmp/pawlang-test
          cd /tmp/pawlang-test
          tar -xzf $GITHUB_WORKSPACE/pawlang-linux.tar.gz
          
          # Clear env vars and set library path
          unset LLVM_SYS_190_PREFIX
          export LD_LIBRARY_PATH="$PWD/pawlang/lib:$LD_LIBRARY_PATH"
          
          # Test C backend without system LLVM
          echo ""
          echo "Test 5a: C backend without system LLVM"
          ./pawlang/bin/pawc $GITHUB_WORKSPACE/examples/hello.paw --backend=c
          if [ -f output.c ]; then
            echo "✅ Self-contained C backend works"
            rm output.c
          else
            echo "❌ Self-contained C backend failed"
            exit 1
          fi
          
          # Test LLVM backend without system LLVM (critical!)
          echo ""
          echo "Test 5b: LLVM backend without system LLVM"
          ./pawlang/bin/pawc $GITHUB_WORKSPACE/examples/hello.paw --backend=llvm
          if [ -f output.ll ]; then
            echo "✅ Self-contained LLVM backend works"
            rm output.ll
          else
            echo "❌ Self-contained LLVM backend failed"
            ls -la pawlang/lib/ || true
            exit 1
          fi
          
          # Verify bundled libraries
          echo ""
          echo "Test 5c: Check bundled libraries"
          LIB_COUNT=$(ls pawlang/lib/*.so* 2>/dev/null | wc -l || echo "0")
          echo "Bundled libraries: $LIB_COUNT"
          if [ "$LIB_COUNT" -gt 0 ]; then
            echo "✅ Libraries properly bundled"
            ls -lh pawlang/lib/*.so* 2>/dev/null || true
          else
            echo "⚠️  Warning: No libraries found"
          fi
          
          echo ""
          echo "=========================================="
          echo "✅ All tests passed on ${{ matrix.arch }}!"
          echo "   • C backend ✅"
          echo "   • LLVM backend ✅"
          echo "   • Type casting ✅"
          echo "   • Integration test ✅"
          echo "   • Self-contained distribution ✅"
          echo "=========================================="
