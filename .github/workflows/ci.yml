name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-latest, macos-13, windows-latest]
        include:
          - os: ubuntu-latest
            arch: Linux x86_64
            zig_version: 0.15.1
          - os: ubuntu-24.04-arm
            arch: Linux ARM64
            zig_version: 0.15.1
          - os: macos-latest
            arch: Apple Silicon (M1/M2/M3)
            zig_version: 0.15.1
          - os: macos-13
            arch: Intel (x86_64)
            zig_version: 0.15.1
          - os: windows-latest
            arch: Windows x86_64
            zig_version: 0.15.1
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: ${{ matrix.zig_version }}
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install LLVM (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y llvm-19 llvm-19-dev clang-19 libc++-19-dev libc++abi-19-dev
        echo "✅ LLVM 19 installed via apt"
      
    - name: Install LLVM (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install llvm@19
        echo "✅ LLVM 19 installed via Homebrew"
    
    - name: Install LLVM (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        choco install llvm --version=19.1.7 --force -y
        echo "✅ LLVM 19.1.7 installed via Chocolatey"
        
        # 使用正确的PowerShell语法添加到PATH
        Add-Content $env:GITHUB_PATH "C:\Program Files\LLVM\bin"
        
        # 设置LLVM环境变量供Zig使用
        echo "LLVM_SYS_190_PREFIX=C:\Program Files\LLVM" >> $env:GITHUB_ENV
        
        # 验证LLVM安装 (注意: Windows的LLVM没有llvm-config.exe)
        echo "Verifying LLVM installation:"
        clang --version
        
        echo ""
        echo "LLVM bin directory contents:"
        Get-ChildItem "C:\Program Files\LLVM\bin" | Select-Object Name | Format-Table -AutoSize
        
    - name: Build PawLang compiler
      run: zig build
      # Windows下build.zig会自动复制LLVM DLL到输出目录
      
    - name: Test - Hello World (Unix)
      if: runner.os != 'Windows'
      run: |
        ./zig-out/bin/pawc examples/hello.paw
        echo "✅ Hello World test passed"
      
    - name: Test - Hello World (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        .\zig-out\bin\pawc.exe examples\hello.paw
        if (Test-Path output.c) {
          echo "✅ Hello World test passed"
          Remove-Item output.c
        } else {
          echo "❌ Test failed"
          exit 1
        }
      
    - name: Test - Type Casting (Unix)
      if: runner.os != 'Windows'
      run: |
        ./zig-out/bin/pawc examples/type_cast_demo.paw --backend=c
        if [ -f output.c ]; then
          echo "✅ Type casting test passed"
          rm output.c
        fi
      
    - name: Test - Type Casting (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        .\zig-out\bin\pawc.exe examples\type_cast_demo.paw --backend=c
        if (Test-Path output.c) {
          echo "✅ Type casting test passed"
          Remove-Item output.c
        } else {
          echo "❌ Test failed"
          exit 1
        }
      
    - name: Test - Integration Test (Unix)
      if: runner.os != 'Windows'
      run: |
        ./zig-out/bin/pawc tests/integration/v0.1.8_test.paw --backend=c
        if [ -f output.c ]; then
          echo "✅ Integration test passed"
          rm output.c
        fi
      
    - name: Test - Integration Test (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        .\zig-out\bin\pawc.exe tests\integration\v0.1.8_test.paw --backend=c
        if (Test-Path output.c) {
          echo "✅ Integration test passed"
          Remove-Item output.c
        } else {
          echo "❌ Test failed"
          exit 1
        }
      
    - name: Test - LLVM Backend (Unix)
      if: runner.os != 'Windows'
      run: |
        ./zig-out/bin/pawc examples/type_cast_demo.paw --backend=llvm
        if [ -f output.ll ]; then
          echo "✅ LLVM backend test passed"
          # Try to compile with clang if available
          if command -v clang &> /dev/null; then
            clang output.ll -o test_llvm 2>/dev/null || echo "⚠️  clang compilation skipped"
            if [ -f test_llvm ]; then
              ./test_llvm
              echo "✅ LLVM runtime test completed (exit code: $?)"
              rm -f test_llvm
            fi
          fi
          rm output.ll
        fi
      
    - name: Test - LLVM Backend (Windows)  
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        .\zig-out\bin\pawc.exe examples\type_cast_demo.paw --backend=llvm
        if (Test-Path output.ll) {
          echo "✅ LLVM backend test passed"
          Remove-Item output.ll
        } else {
          echo "❌ Test failed"
          exit 1
        }
      
    - name: Test - Build without LLVM backend (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🧪 Testing build without LLVM backend..."
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        # Build without LLVM
        zig build -Denable-llvm=false
        
        # Test 1: C backend should still work
        echo ""
        echo "Test 1: Verify C backend works without LLVM"
        ./zig-out/bin/pawc examples/hello.paw --backend=c
        if [ -f output.c ]; then
          echo "✅ C backend works without LLVM"
          rm output.c
        else
          echo "❌ C backend failed"
          exit 1
        fi
        
        # Test 2: LLVM backend should fail gracefully with error message
        echo ""
        echo "Test 2: Verify LLVM backend shows friendly error"
        set +e  # Don't exit on error
        ./zig-out/bin/pawc examples/hello.paw --backend=llvm 2>&1 | tee llvm_error.txt
        EXIT_CODE=$?
        set -e
        
        # Check if error message contains expected text
        if grep -q "LLVM backend not available" llvm_error.txt; then
          echo "✅ Friendly error message displayed"
        else
          echo "❌ Error message not found"
          cat llvm_error.txt
          exit 1
        fi
        
        # Verify LLVM backend didn't create output
        if [ ! -f output.ll ]; then
          echo "✅ LLVM backend correctly disabled"
        else
          echo "❌ LLVM backend shouldn't have created output"
          exit 1
        fi
        
        rm -f llvm_error.txt
        echo ""
        echo "✅ All no-LLVM tests passed!"
      
    - name: Test - Build without LLVM backend (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Write-Host ""
        Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        Write-Host "🧪 Testing build without LLVM backend..."
        Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        # Build without LLVM
        zig build -Denable-llvm=false
        
        # Test 1: C backend should still work
        Write-Host ""
        Write-Host "Test 1: Verify C backend works without LLVM"
        .\zig-out\bin\pawc.exe examples\hello.paw --backend=c
        if (Test-Path output.c) {
          Write-Host "✅ C backend works without LLVM"
          Remove-Item output.c
        } else {
          Write-Host "❌ C backend failed"
          exit 1
        }
        
        # Test 2: LLVM backend should fail gracefully
        Write-Host ""
        Write-Host "Test 2: Verify LLVM backend shows friendly error"
        $output = & .\zig-out\bin\pawc.exe examples\hello.paw --backend=llvm 2>&1
        
        # Check if error message contains expected text
        if ($output -match "LLVM backend not available") {
          Write-Host "✅ Friendly error message displayed"
        } else {
          Write-Host "❌ Error message not found"
          Write-Host $output
          exit 1
        }
        
        # Verify LLVM backend didn't create output
        if (-not (Test-Path output.ll)) {
          Write-Host "✅ LLVM backend correctly disabled"
        } else {
          Write-Host "❌ LLVM backend shouldn't have created output"
          exit 1
        }
        
        Write-Host ""
        Write-Host "✅ All no-LLVM tests passed!"
    
    - name: Test - Distribution Package (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "📦 Testing distribution package..."
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        # Rebuild with LLVM for packaging
        zig build package
        
        echo ""
        echo "🗑️  Uninstalling system LLVM (真实测试环境)..."
        if [ "$RUNNER_OS" = "macOS" ]; then
          brew uninstall --ignore-dependencies llvm@19 || true
          rm -rf /opt/homebrew/opt/llvm@19 || true
          rm -rf /usr/local/opt/llvm@19 || true
          echo "✅ macOS LLVM uninstalled"
        else
          sudo apt-get remove -y llvm-19 llvm-19-dev clang-19 libc++-19-dev libc++abi-19-dev || true
          sudo rm -rf /usr/lib/llvm-19 || true
          echo "✅ Linux LLVM uninstalled"
        fi
        
        # Verify LLVM is really gone
        if command -v llvm-config &> /dev/null; then
          echo "⚠️  Warning: llvm-config still found"
          which llvm-config
        else
          echo "✅ Verified: llvm-config not found"
        fi
        
        # Create clean test directory
        TEST_DIR="/tmp/pawlang-dist-test-$$"
        mkdir -p "$TEST_DIR"
        cd "$TEST_DIR"
        
        # Extract package
        if [ "$RUNNER_OS" = "macOS" ]; then
          tar -xzf "$GITHUB_WORKSPACE/pawlang-macos.tar.gz"
        else
          tar -xzf "$GITHUB_WORKSPACE/pawlang-linux.tar.gz"
        fi
        
        echo ""
        echo "📂 Package contents:"
        ls -la
        
        # Clear LLVM environment variables
        echo ""
        echo "🧹 Clearing LLVM environment variables..."
        unset LLVM_SYS_190_PREFIX
        unset DYLD_LIBRARY_PATH
        unset LD_LIBRARY_PATH
        
        # Test 1: C backend
        echo ""
        echo "Test 1: C backend in clean environment"
        ./pawc examples/hello.paw --backend=c
        if [ -f output.c ]; then
          echo "✅ C backend works"
          rm output.c
        else
          echo "❌ C backend failed"
          exit 1
        fi
        
        # Test 2: LLVM backend (critical test!)
        echo ""
        echo "Test 2: LLVM backend WITHOUT system LLVM"
        ./pawc examples/hello.paw --backend=llvm
        if [ -f output.ll ]; then
          echo "✅ LLVM backend works without system LLVM!"
          echo "   (using bundled libraries)"
          cat output.ll | head -5
          rm output.ll
        else
          echo "❌ LLVM backend failed - distribution not self-contained!"
          echo "Debug: Library search paths"
          if [ "$RUNNER_OS" = "macOS" ]; then
            otool -L bin/pawc
          else
            ldd bin/pawc || true
          fi
          exit 1
        fi
        
        # Test 3: Verify launcher script set up paths correctly
        echo ""
        echo "Test 3: Check library dependencies"
        if [ "$RUNNER_OS" = "macOS" ]; then
          echo "macOS library check:"
          otool -L bin/pawc | grep -i llvm || echo "  (dynamic loading)"
          ls -lh lib/
        else
          echo "Linux library check:"
          ldd bin/pawc | grep -i llvm || echo "  (dynamic loading)"
          ls -lh lib/
        fi
        
        # Cleanup
        cd "$GITHUB_WORKSPACE"
        rm -rf "$TEST_DIR"
        
        echo ""
        echo "✅ Distribution package is self-contained!"
      
    - name: Test - Distribution Package (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Write-Host ""
        Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        Write-Host "📦 Testing distribution package..."
        Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        # Rebuild with LLVM for packaging
        zig build package
        
        Write-Host ""
        Write-Host "🗑️  Uninstalling system LLVM (真实测试环境)..."
        try {
          choco uninstall llvm -y --force | Out-Null
          Write-Host "✅ Chocolatey LLVM uninstalled"
        } catch {
          Write-Host "⚠️  Chocolatey uninstall error (may not be installed)"
        }
        
        # Force remove LLVM directory
        if (Test-Path "C:\Program Files\LLVM") {
          Remove-Item -Recurse -Force "C:\Program Files\LLVM" -ErrorAction SilentlyContinue
          Write-Host "✅ Removed LLVM directory"
        }
        
        # Verify LLVM is really gone
        if (Test-Path "C:\Program Files\LLVM\bin\clang.exe") {
          Write-Host "⚠️  Warning: clang.exe still found"
        } else {
          Write-Host "✅ Verified: LLVM not found"
        }
        
        # Create clean test directory
        $TEST_DIR = "$env:TEMP\pawlang-dist-test-$PID"
        New-Item -ItemType Directory -Path $TEST_DIR -Force | Out-Null
        Set-Location $TEST_DIR
        
        # Extract package
        Expand-Archive -Path "$env:GITHUB_WORKSPACE\pawlang-windows.zip" -DestinationPath . -Force
        
        Write-Host ""
        Write-Host "📂 Package contents:"
        Get-ChildItem
        
        # Clear LLVM environment variables
        Write-Host ""
        Write-Host "🧹 Clearing LLVM environment variables..."
        $env:LLVM_SYS_190_PREFIX = ""
        # Remove LLVM from PATH
        $env:PATH = ($env:PATH -split ';' | Where-Object { $_ -notlike '*LLVM*' }) -join ';'
        
        # Test 1: C backend
        Write-Host ""
        Write-Host "Test 1: C backend in clean environment"
        & .\pawc.bat examples\hello.paw --backend=c
        if (Test-Path output.c) {
          Write-Host "✅ C backend works"
          Remove-Item output.c
        } else {
          Write-Host "❌ C backend failed"
          exit 1
        }
        
        # Test 2: LLVM backend (critical test!)
        Write-Host ""
        Write-Host "Test 2: LLVM backend WITHOUT system LLVM"
        & .\pawc.bat examples\hello.paw --backend=llvm
        if (Test-Path output.ll) {
          Write-Host "✅ LLVM backend works without system LLVM!"
          Write-Host "   (using bundled DLLs)"
          Get-Content output.ll | Select-Object -First 5
          Remove-Item output.ll
        } else {
          Write-Host "❌ LLVM backend failed - distribution not self-contained!"
          Write-Host "Debug: DLLs in bin directory"
          Get-ChildItem bin\*.dll | Select-Object Name, Length | Format-Table
          exit 1
        }
        
        # Test 3: Verify DLLs are present
        Write-Host ""
        Write-Host "Test 3: Check bundled DLLs"
        $dllCount = (Get-ChildItem bin\*.dll | Measure-Object).Count
        Write-Host "  Total DLLs: $dllCount"
        
        if ($dllCount -gt 0) {
          Write-Host "✅ DLLs properly bundled"
          Get-ChildItem bin\*LLVM*.dll | Select-Object Name, @{N='Size(MB)';E={[math]::Round($_.Length/1MB,2)}} | Format-Table
        } else {
          Write-Host "❌ No DLLs found!"
          exit 1
        }
        
        # Cleanup
        Set-Location $env:GITHUB_WORKSPACE
        Remove-Item -Recurse -Force $TEST_DIR
        
        Write-Host ""
        Write-Host "✅ Distribution package is self-contained!"
    
    - name: Summary
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "✅ All tests passed on ${{ matrix.os }}!"
        echo "   • C backend ✅"
        echo "   • LLVM backend ✅"
        echo "   • No-LLVM build ✅"
        echo "   • Error handling ✅"
        echo "   • Self-contained distribution ✅"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      shell: bash
