name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-latest, macos-13, windows-latest]
        include:
          - os: ubuntu-latest
            arch: Linux x86_64
            zig_version: 0.15.1
          - os: ubuntu-24.04-arm
            arch: Linux ARM64
            zig_version: 0.15.1
          - os: macos-latest
            arch: Apple Silicon (M1/M2/M3)
            zig_version: 0.15.1
          - os: macos-13
            arch: Intel (x86_64)
            zig_version: 0.15.1
          - os: windows-latest
            arch: Windows x86_64
            zig_version: 0.15.1
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: ${{ matrix.zig_version }}
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install LLVM (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y llvm-19 llvm-19-dev clang-19 libc++-19-dev libc++abi-19-dev
        echo "✅ LLVM 19 installed via apt"
      
    - name: Install LLVM (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install llvm@19
        echo "✅ LLVM 19 installed via Homebrew"
    
    - name: Install LLVM (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install llvm --version=19.1.7 -y
        echo "✅ LLVM 19 installed via Chocolatey"
        
    - name: Build PawLang compiler
      run: zig build
      
    - name: Test - Hello World (Unix)
      if: runner.os != 'Windows'
      run: |
        ./zig-out/bin/pawc examples/hello.paw
        echo "✅ Hello World test passed"
      
    - name: Test - Hello World (Windows)
      if: runner.os == 'Windows'
      run: |
        .\zig-out\bin\pawc.exe examples\hello.paw
        echo "✅ Hello World test passed"
      shell: cmd
      
    - name: Test - Type Casting (Unix)
      if: runner.os != 'Windows'
      run: |
        ./zig-out/bin/pawc examples/type_cast_demo.paw --backend=c
        if [ -f output.c ]; then
          echo "✅ Type casting test passed"
          rm output.c
        fi
      
    - name: Test - Type Casting (Windows)
      if: runner.os == 'Windows'
      run: |
        .\zig-out\bin\pawc.exe examples\type_cast_demo.paw --backend=c
        if exist output.c (
          echo ✅ Type casting test passed
          del output.c
        )
      shell: cmd
      
    - name: Test - Integration Test (Unix)
      if: runner.os != 'Windows'
      run: |
        ./zig-out/bin/pawc tests/integration/v0.1.8_test.paw --backend=c
        if [ -f output.c ]; then
          echo "✅ Integration test passed"
          rm output.c
        fi
      
    - name: Test - Integration Test (Windows)
      if: runner.os == 'Windows'
      run: |
        .\zig-out\bin\pawc.exe tests\integration\v0.1.8_test.paw --backend=c
        if exist output.c (
          echo ✅ Integration test passed
          del output.c
        )
      shell: cmd
      
    - name: Test - LLVM Backend (Unix)
      if: runner.os != 'Windows'
      run: |
        ./zig-out/bin/pawc examples/type_cast_demo.paw --backend=llvm
        if [ -f output.ll ]; then
          echo "✅ LLVM backend test passed"
          # Try to compile with clang if available
          if command -v clang &> /dev/null; then
            clang output.ll -o test_llvm 2>/dev/null || echo "⚠️  clang compilation skipped"
            if [ -f test_llvm ]; then
              ./test_llvm
              echo "✅ LLVM runtime test completed (exit code: $?)"
              rm -f test_llvm
            fi
          fi
          rm output.ll
        fi
      
    - name: Test - LLVM Backend (Windows)  
      if: runner.os == 'Windows'
      run: |
        .\zig-out\bin\pawc.exe examples\type_cast_demo.paw --backend=llvm
        if exist output.ll (
          echo ✅ LLVM backend test passed
          del output.ll
        )
      shell: cmd
      
    - name: Summary
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "✅ All tests passed on ${{ matrix.os }}!"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      shell: bash
