name: BSD Systems Test

on:
  # Manual trigger
  workflow_dispatch:
  # Also run on releases
  release:
    types: [published]
  # Weekly schedule (every Monday)
  schedule:
    - cron: '0 0 * * 1'

jobs:
  test-bsd:
    name: Test on ${{ matrix.os }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: FreeBSD 14.0
            vm_os: freebsd
            vm_version: '14.0'
          - os: NetBSD 10.0
            vm_os: netbsd
            vm_version: '10.0'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Test on ${{ matrix.os }}
      uses: vmactions/${{ matrix.vm_os }}-vm@v1
      with:
        release: ${{ matrix.vm_version }}
        usesh: true
        prepare: |
          # Install dependencies
          pkg install -y llvm19 git bash curl wget
          
          # Install Zig
          echo "Installing Zig 0.15.1..."
          cd /tmp
          fetch https://ziglang.org/download/0.15.1/zig-freebsd-x86_64-0.15.1.tar.xz || \
          wget https://ziglang.org/download/0.15.1/zig-freebsd-x86_64-0.15.1.tar.xz || \
          curl -L -O https://ziglang.org/download/0.15.1/zig-freebsd-x86_64-0.15.1.tar.xz
          
          tar -xf zig-freebsd-x86_64-0.15.1.tar.xz
          mv zig-freebsd-x86_64-0.15.1 /usr/local/zig
          ln -sf /usr/local/zig/zig /usr/local/bin/zig
          
          echo "Setup complete"
        
        run: |
          echo "=========================================="
          echo "Testing PawLang on ${{ matrix.os }}"
          echo "=========================================="
          
          # Verify tools
          echo ""
          echo "Tool versions:"
          zig version || echo "Zig not found"
          clang --version || echo "Clang not found"
          
          # Build compiler
          echo ""
          echo "Building PawLang compiler..."
          zig build
          
          # Test C backend
          echo ""
          echo "Test 1: C backend"
          ./zig-out/bin/pawc examples/hello.paw --backend=c
          if [ -f output.c ]; then
            echo "PASS: C backend works on ${{ matrix.os }}"
            head -10 output.c
            rm output.c
          else
            echo "FAIL: C backend failed"
            exit 1
          fi
          
          # Test LLVM backend
          echo ""
          echo "Test 2: LLVM backend"
          ./zig-out/bin/pawc examples/hello.paw --backend=llvm
          if [ -f output.ll ]; then
            echo "PASS: LLVM backend works on ${{ matrix.os }}"
            head -10 output.ll
            rm output.ll
          else
            echo "FAIL: LLVM backend failed"
            exit 1
          fi
          
          # Test type casting
          echo ""
          echo "Test 3: Type casting"
          ./zig-out/bin/pawc examples/type_cast_demo.paw --backend=c
          if [ -f output.c ]; then
            echo "PASS: Type casting works"
            rm output.c
          else
            echo "FAIL: Type casting failed"
            exit 1
          fi
          
          echo ""
          echo "=========================================="
          echo "SUCCESS: All tests passed on ${{ matrix.os }}!"
          echo "=========================================="

