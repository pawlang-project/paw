type Option = enum {
    Some(i32),
    None(),
}

fn test1() -> i32 {
    let val: Option = Option::Some(100);
    let result: i32 = val is {
        Some(x) => x,
        None() => 0,
    };
    return result;
}

fn test2() -> i32 {
    let opt1: Option = Option::Some(10);
    let opt2: Option = Option::None();
    
    let a: i32 = opt1 is {
        Some(x) => x,
        None() => 0,
    };
    
    let b: i32 = opt2 is {
        Some(x) => x,
        None() => 5,
    };
    
    return a + b;
}

fn main() -> i32 {
    let r1: i32 = test1();
    println("test1: ");
    
    let r2: i32 = test2();
    println("test2: ");
    
    return r1 + r2;  // 应该是 100 + 15 = 115
}
