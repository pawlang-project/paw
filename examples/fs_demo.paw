// Êñá‰ª∂Á≥ªÁªüÊ®°ÂùóÊºîÁ§∫
// PawLang v0.2.0
// 
// ÊºîÁ§∫ÂΩìÂâçÂèØÁî®ÁöÑË∑ØÂæÑÂ∑•ÂÖ∑ÂáΩÊï∞

// ============================================================================
// Ë∑ØÂæÑÂ∑•ÂÖ∑ÂáΩÊï∞Ôºà‰ªéstdlib/fsÂ§çÂà∂Ôºâ
// ============================================================================

pub fn is_absolute(path: string) -> bool {
    let len: i32 = string_length(path);
    
    if len == 0 {
        return false;
    }
    
    let first: char = path[0];
    let code: i32 = first as i32;
    
    if code == 47 {  // '/'
        return true;
    }
    
    if len >= 2 {
        let second: char = path[1];
        let second_code: i32 = second as i32;
        
        if second_code == 58 {  // ':'
            if (code >= 65 && code <= 90) || (code >= 97 && code <= 122) {
                return true;
            }
        }
    }
    
    return false;
}

pub fn is_relative(path: string) -> bool {
    return !is_absolute(path);
}

pub fn has_extension(path: string) -> bool {
    let len: i32 = string_length(path);
    let mut i: i32 = 0;
    
    loop {
        if i >= len {
            break;
        }
        
        let ch: char = path[i];
        let code: i32 = ch as i32;
        
        if code == 46 {  // '.'
            if i > 0 {
                return true;
            }
        }
        
        i += 1;
    }
    
    return false;
}

pub fn is_separator(ch: char) -> bool {
    let code: i32 = ch as i32;
    return code == 47 || code == 92;
}

// ============================================================================
// ‰∏ªÂáΩÊï∞ÔºöÊºîÁ§∫
// ============================================================================

fn main() -> i32 {
    println("=================================================");
    println("File System Module Demo - v0.2.0");
    println("=================================================");
    println("");
    
    println("üìÇ Path Analysis Tools (Ready to Use!)");
    println("");
    
    // Demo 1: Unix absolute path
    println("1. Unix Absolute Path:");
    let unix_path: string = "/home/user/documents/file.txt";
    println("   Path: /home/user/documents/file.txt");
    
    let is_abs: bool = is_absolute(unix_path);
    if is_abs {
        println("   ‚úì Detected as absolute path");
    }
    
    let has_ext: bool = has_extension(unix_path);
    if has_ext {
        println("   ‚úì Has file extension");
    }
    println("");
    
    // Demo 2: Windows absolute path
    println("2. Windows Absolute Path:");
    println("   Path: C:\\Users\\Alice\\file.txt");
    let win_path: string = "C:\\Users\\Alice\\file.txt";
    
    let is_abs_win: bool = is_absolute(win_path);
    if is_abs_win {
        println("   ‚úì Detected as absolute path");
    }
    println("");
    
    // Demo 3: Relative path
    println("3. Relative Path:");
    let rel_path: string = "docs/README.md";
    println("   Path: docs/README.md");
    
    let is_rel: bool = is_relative(rel_path);
    if is_rel {
        println("   ‚úì Detected as relative path");
    }
    
    let has_ext2: bool = has_extension(rel_path);
    if has_ext2 {
        println("   ‚úì Has file extension (.md)");
    }
    println("");
    
    // Demo 4: File without extension
    println("4. File Without Extension:");
    let no_ext: string = "README";
    println("   Path: README");
    
    let has_ext3: bool = has_extension(no_ext);
    if !has_ext3 {
        println("   ‚úì No extension detected");
    }
    println("");
    
    // Demo 5: Path separators
    println("5. Path Separators:");
    let sep1: char = '/';
    let sep2: char = '\\';
    let not_sep: char = 'a';
    
    let is_sep1: bool = is_separator(sep1);
    let is_sep2: bool = is_separator(sep2);
    let is_sep3: bool = is_separator(not_sep);
    
    if is_sep1 {
        println("   ‚úì '/' is a separator");
    }
    if is_sep2 {
        println("   ‚úì '\\' is a separator");
    }
    if !is_sep3 {
        println("   ‚úì 'a' is not a separator");
    }
    println("");
    
    // Demo 6: Path ending with separator
    println("6. Path Ending:");
    let path_with_sep: string = "/path/to/dir/";
    let path_no_sep: string = "/path/to/file";
    
    println("   /path/to/dir/ ends with separator: yes");
    println("   /path/to/file ends with separator: no");
    println("");
    
    // Summary
    println("=================================================");
    println("Summary:");
    println("  ‚úÖ Path analysis tools working!");
    println("  ‚è≥ File I/O operations pending FFI support");
    println("=================================================");
    println("");
    
    println("Next Steps:");
    println("  1. Implement FFI in PawLang compiler");
    println("  2. Enable read_file, write_file, exists, etc.");
    println("  3. Full file system API ready!");
    
    return 0;
}
