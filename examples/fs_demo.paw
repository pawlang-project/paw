// 文件系统 API 演示
// PawLang v0.2.0

// 注意：当前 PawLang 还不支持 FFI 调用，所以这是一个演示
// 展示未来的 API 设计

fn demo_file_operations() -> i32 {
    // 写入文件
    // write_file("test.txt", "Hello, PawLang!");
    
    // 检查文件存在
    // if exists("test.txt") {
    //     let content: string = read_file("test.txt");
    //     println(content);
    // }
    
    // 追加内容
    // append_file("test.txt", "\nNew line!");
    
    // 获取文件大小
    // let size: i32 = file_size("test.txt");
    
    // 删除文件
    // delete_file("test.txt");
    
    return 0;
}

fn demo_dir_operations() -> i32 {
    // 创建目录
    // create_dir("mydir");
    
    // 递归创建
    // create_dir_all("path/to/deep/dir");
    
    // 检查是否为目录
    // if is_dir("mydir") {
    //     println("It's a directory");
    // }
    
    // 删除目录
    // delete_dir("mydir");
    
    return 0;
}

fn main() -> i32 {
    println("文件系统 API 演示");
    println("==================");
    
    // 演示文件操作
    let r1: i32 = demo_file_operations();
    
    // 演示目录操作
    let r2: i32 = demo_dir_operations();
    
    return r1 + r2;
}
