// 完整的enum和模式匹配测试

type Option = enum {
    Some(i32),
    None(),
}

fn test_is(value: Option) -> i32 {
    // is用于条件判断
    if value is Some(x) {
        return x;
    }
    return 0;
}

fn test_match(value: Option) -> i32 {
    // 完整的模式匹配表达式
    let result: i32 = value is {
        Some(x) => x * 2,
        None() => 0,
    };
    return result;
}

fn main() -> i32 {
    let value1: Option = Option::Some(42);
    let value2: Option = Option::None();
    
    let r1: i32 = test_is(value1);
    let r2: i32 = test_match(value1);
    
    return r1 + r2;
}

